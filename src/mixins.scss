// Breakpoint mixin
@mixin salemobile {
  @media (max-width: 750px) { @content; }
}
// Breakpoint mixin
@mixin salenotmobile {
  @media (min-width: 751px) { @content; }
}
// Breakpoint mixin
@mixin saledesktop {
  @media (min-width: 1920px) { @content; }
}
// Scaling mixin
@mixin salescale($properties, $min-value, $max-value) {
  $min-vw: 375px;
  $max-vw: 1440px;
  @each $property in $properties {
    #{$property}: $min-value;
  }
  @media (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
    }
  }
  @media (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
}
@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

//Flexible breakpoint mixins
$breakpoint-map: (
  'desktop-up': 'min-width' 1146px,
  'desktop-down': 'max-width' 1145px,
  'tablet-big-up': 'min-width' 1024px,
  'tablet-big-down': 'max-width' 1023px,
  'tablet-up': 'min-width' 768px,
  'tablet-down': 'max-width' 767px,
  'mobile-up': 'min-width' 414px,
  'mobile-down': 'max-width' 413px
);   

@mixin bp($breakpoint) {
  $breakpoint-vals: map-get($breakpoint-map, $breakpoint);
  @if ($breakpoint-vals == null) {
    @error 'Breakpoint #{$breakpoint} is not defined :sadparrot:';
  }
  @media (#{nth($breakpoint-vals, 1)}: nth($breakpoint-vals, 2)) { @content; }
}

//Aspect ratio mixin
@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    content: '';
    display: block;
    padding-top: $height / $width * 100%;
    width: 100%;
    z-index: 0;
  }
}